{"ast":null,"code":"var _jsxFileName = \"C:\\\\OSPanel\\\\domains\\\\react-chat\\\\client\\\\src\\\\components\\\\Messages.jsx\";\n// Импорт React из 'react'\nimport React from \"react\";\n\n// Импорт CSS модуля стиля для страницы\nimport styles from \"../styles/Messages.module.css\";\n\n// Декларация функционального компонента Messages с пропсами messages и name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messages = ({\n  messages,\n  name\n}) => {\n  // Возвращаемый JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.messages,\n    children:\n    // Используем метод map() для преобразования массива messages в массив React-элементов\n    messages.map(({\n      user,\n      message\n    }, i) => {\n      // Проверяем, что userName в сообщении идентичен текущему пользователю\n      const itsMe = user.name.trim().toLowerCase() === name.trim().toLowerCase();\n      // В зависимости от того, отправил текущий пользователь сообщение или нет, мы задаем соответствующий CSS-класс\n      const className = itsMe ? styles.me : styles.user;\n      return (\n        /*#__PURE__*/\n        // Для каждого сообщения возвращаем div-элемент, уникальный ключ задаем по индексу i, \n        // также применяем классы styles.message и className (styles.me или styles.user)\n        _jsxDEV(\"div\", {\n          className: `${styles.message} ${className}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.user,\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text,\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n// Экспорт компонента Messages по умолчанию\n_c = Messages;\nexport default Messages;\n\n// Данный код представляет собой компонент Messages, который отображает список сообщений.\n// Этот компонент принимает два пропса: messages (массив сообщений) и name (имя текущего пользователя). \n// Каждое сообщение представляет собой объект с двумя свойствами: user (объект с данными пользователя) и message (строка с текстом сообщения). \n// Затем компонент Messages рендерит сообщения таким образом, что сообщения от текущего пользователя получает отличительный CSS-класс от сообщений других пользователей.\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","Messages","messages","name","className","children","map","user","message","i","itsMe","trim","toLowerCase","me","fileName","_jsxFileName","lineNumber","columnNumber","text","_c","$RefreshReg$"],"sources":["C:/OSPanel/domains/react-chat/client/src/components/Messages.jsx"],"sourcesContent":["// Импорт React из 'react'\nimport React from \"react\";\n\n// Импорт CSS модуля стиля для страницы\nimport styles from \"../styles/Messages.module.css\";\n\n// Декларация функционального компонента Messages с пропсами messages и name\nconst Messages = ({ messages, name }) => {\n  // Возвращаемый JSX\n  return (\n    <div className={styles.messages}>\n      {\n        // Используем метод map() для преобразования массива messages в массив React-элементов\n        messages.map(({ user, message }, i) => {\n          // Проверяем, что userName в сообщении идентичен текущему пользователю\n          const itsMe = user.name.trim().toLowerCase() === name.trim().toLowerCase();\n          // В зависимости от того, отправил текущий пользователь сообщение или нет, мы задаем соответствующий CSS-класс\n          const className = itsMe ? styles.me : styles.user;\n\n          return (\n            // Для каждого сообщения возвращаем div-элемент, уникальный ключ задаем по индексу i, \n            // также применяем классы styles.message и className (styles.me или styles.user)\n            <div key={i} className={`${styles.message} ${className}`}>\n              {/* Визуализируем имя пользователя, отправившего сообщение */}\n              <span className={styles.user}>{user.name}</span>\n              {/* Визуализируем текст сообщения */}\n              <div className={styles.text}>{message}</div>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\n// Экспорт компонента Messages по умолчанию\nexport default Messages;\n\n// Данный код представляет собой компонент Messages, который отображает список сообщений.\n// Этот компонент принимает два пропса: messages (массив сообщений) и name (имя текущего пользователя). \n// Каждое сообщение представляет собой объект с двумя свойствами: user (объект с данными пользователя) и message (строка с текстом сообщения). \n// Затем компонент Messages рендерит сообщения таким образом, что сообщения от текущего пользователя получает отличительный CSS-класс от сообщений других пользователей."],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAOC,MAAM,MAAM,+BAA+B;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EACvC;EACA,oBACEH,OAAA;IAAKI,SAAS,EAAEN,MAAM,CAACI,QAAS;IAAAG,QAAA;IAE5B;IACAH,QAAQ,CAACI,GAAG,CAAC,CAAC;MAAEC,IAAI;MAAEC;IAAQ,CAAC,EAAEC,CAAC,KAAK;MACrC;MACA,MAAMC,KAAK,GAAGH,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAKT,IAAI,CAACQ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1E;MACA,MAAMR,SAAS,GAAGM,KAAK,GAAGZ,MAAM,CAACe,EAAE,GAAGf,MAAM,CAACS,IAAI;MAEjD;QAAA;QACE;QACA;QACAP,OAAA;UAAaI,SAAS,EAAG,GAAEN,MAAM,CAACU,OAAQ,IAAGJ,SAAU,EAAE;UAAAC,QAAA,gBAEvDL,OAAA;YAAMI,SAAS,EAAEN,MAAM,CAACS,IAAK;YAAAF,QAAA,EAAEE,IAAI,CAACJ;UAAI;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAEhDjB,OAAA;YAAKI,SAAS,EAAEN,MAAM,CAACoB,IAAK;YAAAb,QAAA,EAAEG;UAAO;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GAJpCR,CAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKN;MAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEV,CAAC;;AAED;AAAAE,EAAA,GA5BMlB,QAAQ;AA6Bd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}