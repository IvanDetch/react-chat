{"ast":null,"code":"var _jsxFileName = \"C:\\\\OSPanel\\\\domains\\\\react-chat\\\\client\\\\src\\\\components\\\\AppRoutes.jsx\";\n// Импортируем библиотеку React для создания компонентов\nimport React from 'react';\n\n// Импортируем Routes и Route из react-router-dom.\n// react-router-dom - это библиотека, которая предоставляет декларативное API \n// для создания маршрутизации в одностраничных приложениях на React\nimport { Routes, Route } from 'react-router-dom';\n\n// Импортируем компоненты Main и Chat, которые будут отображаться в зависимости от маршрута\nimport Main from './Main';\nimport Chat from './Chat';\n\n// Создаем функциональный компонент AppRoutes, используя стрелочную функцию.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppRoutes = () =>\n/*#__PURE__*/\n// Компонент Routes оборачивает все дочерние Route и служит контейнером для них.\n// Он слушает изменения в адресной строке и на основании этого выбирает,\n// какой из его детей (Route) отобразить\n_jsxDEV(Routes, {\n  children: [/*#__PURE__*/_jsxDEV(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Route, {\n    path: \"/chat\",\n    element: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 38\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 5\n}, this);\n\n// Экспортируем наш компонент AppRoutes, чтобы использовать его в других файлах\n_c = AppRoutes;\nexport default AppRoutes;\n\n// В данном маршрутизаторе установлены пути для двух компонентов - Main и Chat. \n// Компонент Main будет отображаться при переходе на корневой маршрут (\"/\"), а компонент Chat - при переходе на маршрут \"/chat\".\nvar _c;\n$RefreshReg$(_c, \"AppRoutes\");","map":{"version":3,"names":["React","Routes","Route","Main","Chat","jsxDEV","_jsxDEV","AppRoutes","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/OSPanel/domains/react-chat/client/src/components/AppRoutes.jsx"],"sourcesContent":["// Импортируем библиотеку React для создания компонентов\r\nimport React from 'react'\r\n\r\n// Импортируем Routes и Route из react-router-dom.\r\n// react-router-dom - это библиотека, которая предоставляет декларативное API \r\n// для создания маршрутизации в одностраничных приложениях на React\r\nimport { Routes, Route } from 'react-router-dom';\r\n\r\n// Импортируем компоненты Main и Chat, которые будут отображаться в зависимости от маршрута\r\nimport Main from './Main';\r\nimport Chat from './Chat';\r\n\r\n// Создаем функциональный компонент AppRoutes, используя стрелочную функцию.\r\nconst AppRoutes = () => (\r\n    // Компонент Routes оборачивает все дочерние Route и служит контейнером для них.\r\n    // Он слушает изменения в адресной строке и на основании этого выбирает,\r\n    // какой из его детей (Route) отобразить\r\n    <Routes>\r\n        {/* Компонент Route представляет собой отдельный маршрут в приложении.\r\n         Если path совпадает с текущим маршрутом в адресной строке, отображается компонент \r\n         в атрибуте element. В данном случае, если маршрут равен '/',\r\n         то элементом будет компонент <Main /> */}\r\n        <Route path=\"/\" element={<Main />} />\r\n\r\n        {/* Также отобразится компонент <Chat />, если маршрут равен '/chat' */}\r\n        <Route path=\"/chat\" element={<Chat />} />\r\n    </Routes>\r\n);\r\n\r\n// Экспортируем наш компонент AppRoutes, чтобы использовать его в других файлах\r\nexport default AppRoutes\r\n\r\n// В данном маршрутизаторе установлены пути для двух компонентов - Main и Chat. \r\n// Компонент Main будет отображаться при переходе на корневой маршрут (\"/\"), а компонент Chat - при переходе на маршрут \"/chat\"."],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,SAASC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;;AAEhD;AACA,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAA;AAAA;AACd;AACA;AACA;AACAD,OAAA,CAACL,MAAM;EAAAO,QAAA,gBAKHF,OAAA,CAACJ,KAAK;IAACO,IAAI,EAAC,GAAG;IAACC,OAAO,eAAEJ,OAAA,CAACH,IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAGrCR,OAAA,CAACJ,KAAK;IAACO,IAAI,EAAC,OAAO;IAACC,OAAO,eAAEJ,OAAA,CAACF,IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACrC,CACX;;AAED;AAAAC,EAAA,GAhBMR,SAAS;AAiBf,eAAeA,SAAS;;AAExB;AACA;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}